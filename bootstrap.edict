[
]@newline

[LTV_concat!]@concat

[compile_ltv(@code jit_edict code)]@compile
[[a b c] compile compile!!! stack!]@test_compile

[vm_try(cif_preview_module!)]@preview
[vm_try(cif_import_module())]@import
[[preview(lib) import(lib) lib](@lib)]@loadlib

[loadlib([../test/build/libtestlib.so]) @test test.y.1 stack!]@testimport
[loadlib([/home/jnyberg/htm/build/libhtmlib.so]) @htm htm.init(int! '((char)*)*'!)]@testimport2
[loadlib([/home/jnyberg/htm/build/libhtmlib.so]) <init(int! '((char)*)*'!)>]@testimport3

[bench encaps! vm_while! | locals!]@fastbench
[bench [dup! ! loop!]@loop loop! | locals!]@midbench

[a b int_add! a@ limit int_nequal! slowloop!]@slowloop
[int! @limit limit@ int! 0@ @a int! 1@ @b slowloop! | locals!]@slowbench

[vm_eval(ROOT [ROOT<ARG0 decaps! stack! ! encaps! <RETURN>@>] [square(3)]) stack!]@async_test1

[[]<@thunk @root @sig encaps(vm_continuation(encaps(sig) root thunk))>/]@continuation
[[]<@continuation @arg vm_async(continuation arg)@thread>]@async
[<vm_await(thread)>/]@await

[await(async([square(3)] continuation('(LTV)*(*)((LTV)*)' ROOT [ROOT<ARG0 decaps! stack! ! encaps! <RETURN>@>]))) stack!]@async_test6

[continuation('(LTV)*(*)((LTV)*)' ROOT [ROOT<ARG0 decaps! stack! ! encaps! <RETURN>@>])@C
 [square(2)] async(C) @T1
 [square(3)] async(C) @T2
 minus(await(T2) await(T1))
 stack!
 ]@async_test7

[minus(1)]@decrement

[[[repl(get_stdin!)|]! repeat!]@repeat repeat!]/

repl(get_stdin!)
